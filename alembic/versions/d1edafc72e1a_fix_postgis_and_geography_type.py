"""Fix PostGIS and geography type

Revision ID: d1edafc72e1a
Revises: 
Create Date: 2025-02-20 01:02:19.556542

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import geoalchemy2
from geoalchemy2.types import Geography
from sqlalchemy import text


# revision identifiers, used by Alembic.
revision: str = 'd1edafc72e1a'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('drivers',
    sa.Column('driver_id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('phone_number', sa.String(), nullable=False),
    sa.Column('driver_license', sa.String(), nullable=False),
    sa.Column('is_available', sa.Boolean(), nullable=True),
    sa.Column('rating', sa.Numeric(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('driver_id'),
    sa.UniqueConstraint('driver_license'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('phone_number')
    )
    op.create_index(op.f('ix_drivers_driver_id'), 'drivers', ['driver_id'], unique=False)
    op.create_table('users',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('phone_number', sa.String(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('user_id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('phone_number')
    )
    op.create_index(op.f('ix_users_user_id'), 'users', ['user_id'], unique=False)
    op.create_table('cars',
    sa.Column('car_id', sa.Integer(), nullable=False),
    sa.Column('driver_id', sa.Integer(), nullable=False),
    sa.Column('make', sa.String(), nullable=False),
    sa.Column('model', sa.String(), nullable=False),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('license_plate', sa.String(), nullable=False),
    sa.Column('color', sa.String(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['driver_id'], ['drivers.driver_id'], ),
    sa.PrimaryKeyConstraint('car_id'),
    sa.UniqueConstraint('license_plate')
    )
    op.create_index(op.f('ix_cars_car_id'), 'cars', ['car_id'], unique=False)
    op.create_table(
        'rides',
        sa.Column('ride_id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('driver_id', sa.Integer(), nullable=False),
        sa.Column(
            'pickup_location',
            Geography(geometry_type='POINT', srid=4326, name="public.geography"),
            nullable=False
        ),
        sa.Column(
            'dropoff_location',
            Geography(geometry_type='POINT', srid=4326, name="public.geography"),
            nullable=False
        ),
        sa.Column('status', sa.String(), nullable=False),
        sa.Column('fare', sa.Numeric(), nullable=False),
        sa.Column('distance', sa.Numeric(), nullable=False),
        sa.Column('started_at', sa.TIMESTAMP(), nullable=True),
        sa.Column('completed_at', sa.TIMESTAMP(), nullable=True),
        sa.Column('created_at', sa.TIMESTAMP(), nullable=True),
        sa.Column('updated_at', sa.TIMESTAMP(), nullable=True),
        sa.ForeignKeyConstraint(['driver_id'], ['drivers.driver_id']),
        sa.ForeignKeyConstraint(['user_id'], ['users.user_id']),
        sa.PrimaryKeyConstraint('ride_id'),
    )

    # Use raw SQL to prevent duplicate index errors
    op.execute(text("CREATE INDEX IF NOT EXISTS idx_rides_dropoff_location ON rides USING gist (dropoff_location);"))
    op.execute(text("CREATE INDEX IF NOT EXISTS idx_rides_pickup_location ON rides USING gist (pickup_location);"))

    op.create_index(op.f('ix_rides_ride_id'), 'rides', ['ride_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_rides_ride_id'), table_name='rides')
    op.drop_index('idx_rides_pickup_location', table_name='rides', postgresql_using='gist')
    op.drop_index('idx_rides_dropoff_location', table_name='rides', postgresql_using='gist')
    op.drop_table('rides')
    op.drop_index(op.f('ix_cars_car_id'), table_name='cars')
    op.drop_table('cars')
    op.drop_index(op.f('ix_users_user_id'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_drivers_driver_id'), table_name='drivers')
    op.drop_table('drivers')
    # ### end Alembic commands ###
